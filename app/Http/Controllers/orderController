<?php

namespace App\Http\Controllers;
use App\Models\Order;
use App\Models\Cart;
use App\Models\User;
use App\Models\Orderitem;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cookie;
use smasif\ShurjopayLaravelPackage\ShurjopayService;
use Illuminate\Http\Request;
use Barryvdh\DomPDF\Facade as PDF;
//use PDF;


use App\Mail\TestMail;
use Illuminate\Support\Facades\Mail;
use Symfony\Component\VarDumper\VarDumper;



class OrderController extends Controller
{
    //
    function user_order(Request $req)
    {

        $order = new Order();

        $user = User::where('id','=',Auth::user()->id)->first();

        $order->user_id = $user->id;
        $order->address = $req->input('address');
        $order->city = $req->input('city');
        $order->phone = $req->input('phone');
        $order->price = $req->input('price');
        $order->del_charge = $req->input('del_charge');
        $order->coupon_move = $req->input('coupon_move');
        $order->wallet_move = $req->input('wallet_move');
        $order->gtotal = $req->input('gtotal');

        $user->wallet = $user->wallet - $req->input('wallet_move');
        if($user->wallet < 0)
        {
            $user->wallet = 0;
        }
        $user->update();

        $gtotal = $order->gtotal;

        $order->save();


        $last_order_id = $order->id;

        // order_item, from cookie

        if(Cookie::get('shopping_cart'))
        {

        $cookie_data = stripslashes(Cookie::get('shopping_cart'));
        $cart_data = json_decode($cookie_data, true);

        $items_in_cart = $cart_data;

        foreach($items_in_cart as $data)
        {
            Orderitem::create([
                'order_id' => $last_order_id,
                'item_id' => $data['item_id'],
                'quantity' => $data['item_quantity'],
                'size' => $data['size'],
                'color' => $data['test'],
                'price' => $data['item_price'],
                'vendor_id' => $data['vendor_id']
            ]);
        }


        Cookie::queue(Cookie::forget('shopping_cart'));

    }

        $last_order = Order::where('id','=',$last_order_id)->get();
        $order = Order::where('id','=',$last_order_id)->first();


        $details = [
            'title' => 'Your Order has confirmed!',
            'gtotal' => $gtotal,
            'order_id' => $last_order_id,
            'total' => $order->price,
            'wallet_move' => $order->wallet_move,
            'coupon_move' => $order->coupon_move,
            'address' => $order->address,
            'del_charge' => $order->del_charge

        ];



        Mail::to(Auth::user()->email)->send(new TestMail($details));
        //return "Email Has been Sent!!";

        $admin_mail = [
            'title' => 'A new order has received!',
            'gtotal' => $gtotal,
            'order_id' => $last_order_id,
            'total' => $order->price,
            'wallet_move' => $order->wallet_move,
            'coupon_move' => $order->coupon_move,
            'address' => $order->address,
            'del_charge' => $order->del_charge
        ];

        Mail::to('admin@valoshop.com.bd')->send(new TestMail($admin_mail));


        if($req->input('pg') == 'gateway')
        {
            $shurjopay_service = new ShurjopayService();

            //var_dump($shurjopay_service);
            $tx_id = $shurjopay_service->generateTxId();
            $success_route = url('complete_order/'.$last_order_id);
            $shurjopay_service->sendPayment($gtotal, $last_order_id, $success_route); //You will pass the amount variable in place of 2

             //This is your custom route where you want to back after completing the transaction.
           // $shurjopay_service->sendPayment(2, $success_route);


        }

        else
        {
            $adorder = Order::where('id','=',$last_order_id)->get();
             return view('frontend.order_success')->with('order',$adorder);
        }

    }



    use RegistersUsers;

    /**
     * Where to redirect users after registration.
     *
     * @var string
     */
    protected $redirectTo = RouteServiceProvider::HOME;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest');
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'string', 'min:4', 'confirmed'],
        ]);
    }


    function guest_order(array $data, Request $req)
    {
        $user = User::where('email', '=', $req->input('email'))->first();

        if ($user === null) {
            $user = new User();

            $user->email = $req->input('email');
            $user->name = $req->input('name');
            $user->city = $req->input('city');
            $user->phone = $req->input('phone');
            $user->password = Hash::make($req->input('password'));

            $user->save();
        }
        else{
            $order->user_id = $user->id;
        }



        $order->address = $req->input('address');
        $order->city = $req->input('city');
        $order->phone = $req->input('phone');
        $order->price = $req->input('price');
        $order->del_charge = $req->input('del_charge');
        $order->coupon_move = $req->input('coupon_move');
        $order->gtotal = $req->input('gtotal');



        $gtotal = $order->gtotal;

        $order->save();


        $last_order_id = $order->id;

        // order_item, from cookie

        if(Cookie::get('shopping_cart'))
        {

        $cookie_data = stripslashes(Cookie::get('shopping_cart'));
        $cart_data = json_decode($cookie_data, true);

        $items_in_cart = $cart_data;

        foreach($items_in_cart as $data)
        {
            Orderitem::create([
                'order_id' => $last_order_id,
                'item_id' => $data['item_id'],
                'quantity' => $data['item_quantity'],
                'size' => $data['size'],
                'color' => $data['test'],
                'price' => $data['item_price'],
                'vendor_id' => $data['vendor_id']
            ]);
        }


        Cookie::queue(Cookie::forget('shopping_cart'));

    }

        $last_order = Order::where('id','=',$last_order_id)->get();
        $order = Order::where('id','=',$last_order_id)->first();


        $details = [
            'title' => 'Your Order has confirmed!',
            'gtotal' => $gtotal,
            'order_id' => $last_order_id,
            'total' => $order->price,
            'wallet_move' => $order->wallet_move,
            'coupon_move' => $order->coupon_move,
            'address' => $order->address,
            'del_charge' => $order->del_charge

        ];



        Mail::to(Auth::user()->email)->send(new TestMail($details));
        //return "Email Has been Sent!!";

        $admin_mail = [
            'title' => 'A new order has received!',
            'gtotal' => $gtotal,
            'order_id' => $last_order_id,
            'total' => $order->price,
            'wallet_move' => $order->wallet_move,
            'coupon_move' => $order->coupon_move,
            'address' => $order->address,
            'del_charge' => $order->del_charge
        ];

        Mail::to('admin@valoshop.com.bd')->send(new TestMail($admin_mail));


        if($req->input('pg') == 'gateway')
        {
            $shurjopay_service = new ShurjopayService();

            //var_dump($shurjopay_service);
            $tx_id = $shurjopay_service->generateTxId();
            $success_route = url('complete_order/'.$last_order_id);
            $shurjopay_service->sendPayment($gtotal, $last_order_id, $success_route); //You will pass the amount variable in place of 2

             //This is your custom route where you want to back after completing the transaction.
           // $shurjopay_service->sendPayment(2, $success_route);


        }

        else
        {
            $adorder = Order::where('id','=',$last_order_id)->get();
             return view('frontend.order_success')->with('order',$adorder);
        }

    }




    function complete_order($id)
    {
        $order = Order::where('id','=',$id)->get();

        return view('frontend.order_success')->with('order',$order);
    }

    function order_success()
    {
        $order = Order::where('user_id','=',Auth::user()->id)->first();

        $order_item = Orderitem::where('user_id','=',Auth::user()->id)->get();


        foreach ($order_item as $data)
        {
            Orderitem::create([
                'user_id' => $data['user_id'],
                'item_id' => $data['item_id'],
                'quantity' => $data['quantity'],
            ]);

            Cart::destroy($data);
        }

        //$id = Cart::where('user_id','=',Auth::user()->id)->get();
        //Cart::destroy($id);

        return view('frontend.order_success')->with('order',$order);
    }

    function user_order_show()
    {
        $order = Order::where('user_id','=',Auth::user()->id)->get();

        return view('user.order')->with('order',$order);
    }

    function admin_invoice($id)
    {
        $order = Order::find($id);

        $order_item = Orderitem::where('order_id','=',$order->id)->get();

        //return view('pdf.invoice')->with('item',$order)->with('order_item',$order_item);

        $data = [
            'item' => $order,
            'order_item' => $order_item
        ];
        $pdf = PDF::loadView('pdf.invoice', $data);

        return $pdf->stream('invoice.pdf');

    }
}
